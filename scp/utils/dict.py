# AUTOGENERATED! DO NOT EDIT! File to edit: 02_utils.dict.ipynb (unless otherwise specified).

__all__ = ['apply_to_vals', 'remove_key', 'flatten_intra', 'flatten_inter_helper', 'flatten_inter']

# Cell
import pandas as pd
import numpy as np

# Cell
def apply_to_vals(nested_dict, func, use_key:bool=False):
    '''Applies a function "func" to all non-dict values of a (nested) dictionary'''
    new_dict = dict()

    for k, v in nested_dict.items():
        if isinstance(v, dict):
            new_dict[k] = apply_to_vals(v, func, use_key)
        else:
            if use_key:
                new_dict[k] = func(k, v)
            else:
                new_dict[k] = func(v)

    return new_dict

# Cell
def remove_key(nested_dict, key):
    '''Removes a key, together with its value, from a (nested) dict)'''
    new_dict = dict()

    for k, v in nested_dict.items():
        if isinstance(v, dict):
            if k!=key:
                new_dict[k] = remove_key(v, key)
        else:
            if k!=key:
                new_dict[k] = v
    return new_dict

# Cell
def flatten_intra(nested_dict, include_key:bool=False):
    new_dict = dict()
    intra_li = list()

    for k, v in nested_dict.items():
        if isinstance(v, dict):
            new_dict[k] = flatten_intra(v, include_key)
        else:
            if include_key:
                intra_li.append((k, v))
            else:
                intra_li.append(v)

    if intra_li:
        return intra_li
    else:
        return new_dict

# Cell
def flatten_inter_helper(nested_dict):
    new_dict = dict()
    intra_dict = dict()

    for k, v in nested_dict.items():
        if isinstance(v, dict):
            new_dict[k] = flatten_inter_helper(v)
        else:
            for kk, vv in v:
                if intra_dict.get(kk) is None:
                    intra_dict[kk] = [vv,]
                else:
                    intra_dict[kk].append(vv)

    if intra_dict:
        return intra_dict
    else:
        return new_dict

def flatten_inter(nested_dict):

    def flatten_inter_helper(nested_dict):
        new_dict = dict()
        intra_dict = dict()

        for k, v in nested_dict.items():
            if isinstance(v, dict):
                new_dict[k] = flatten_inter_helper(v)
            else:
                for kk, vv in v:
                    if intra_dict.get(kk) is None:
                        intra_dict[kk] = [vv,]
                    else:
                        intra_dict[kk].append(vv)

        if intra_dict:
            return intra_dict
        else:
            return new_dict

    temp = flatten_intra(nested_dict, include_key=True)
    return flatten_inter_helper(temp)
